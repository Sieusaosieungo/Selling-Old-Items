{"version":3,"sources":["pages/PostProduct/index.js"],"names":["Option","Select","TextArea","Input","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","withCookies","Form","create","name","getFieldDecorator","form","cookies","history","useState","categories","setCategories","images","setImages","accessToken","console","log","onChange","e","target","files","useEffect","axios","mehod","url","config","API_URL","headers","authorization","then","res","data","results","catch","err","className","onSubmit","preventDefault","validateFieldsAndScroll","values","formData","FormData","set","category_id","cost","description","append","productMainImage","productAttachImages","method","message","success","push","Item","label","rules","required","type","hasFeedback","placeholder","map","index","_id","key","value","htmlType"],"mappings":"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","file":"static/js/14.907cdb18.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { withCookies } from 'react-cookie';\r\nimport axios from 'axios';\r\nimport { Input, Form, Select, Button, message } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport './style.scss';\r\n\r\nimport config from '../../utils/config';\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\nconst prefixCls = 'post-product';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nconst PostProduct = ({\r\n  form: { getFieldDecorator },\r\n  form,\r\n  cookies: { cookies },\r\n  history,\r\n}) => {\r\n  const [categories, setCategories] = useState([]);\r\n  const [images, setImages] = useState({});\r\n\r\n  const { accessToken } = cookies;\r\n\r\n  console.log('history: ', history);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log('product before upload:', { ...values, ...images });\r\n\r\n        const formData = new FormData();\r\n        formData.set('name', values.name);\r\n        formData.set('category_id', values.category_id);\r\n        formData.set('cost', values.cost);\r\n        formData.set('description', values.description);\r\n        formData.append('productMainImage', images.productMainImage);\r\n        formData.append('productAttachImages', images.productAttachImages);\r\n\r\n        axios({\r\n          method: 'POST',\r\n          url: `${config.API_URL}/products/`,\r\n          headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n          data: formData,\r\n        })\r\n          .then(res => {\r\n            if (res.data.results) {\r\n              console.log('product uploaded: ', res.data);\r\n              message.success('Đăng sản phẩm thành công !');\r\n              setImages({});\r\n              history.push('/user/my-posts');\r\n            }\r\n          })\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  };\r\n\r\n  const onChange = e => {\r\n    const { name, files } = e.target;\r\n    setImages({ ...images, [name]: files[0] });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      mehod: 'GET',\r\n      url: `${config.API_URL}/categories/`,\r\n      headers: {\r\n        authorization: `Bearer ${accessToken}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => {\r\n        if (res.data.results.categories) {\r\n          setCategories(res.data.results.categories);\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`${prefixCls}`}>\r\n      <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n        <Form.Item label=\"Tên sản phẩm:\">\r\n          {getFieldDecorator('name', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Tên sản phẩm không được để trống',\r\n              },\r\n            ],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Ảnh chính:\">\r\n          <label className=\"upload-btn-wrapper\">\r\n            <input\r\n              type=\"file\"\r\n              required\r\n              onChange={onChange}\r\n              name=\"productMainImage\"\r\n            />\r\n            <span>Tải lên ảnh</span>\r\n          </label>\r\n        </Form.Item>\r\n        <Form.Item label=\"Ảnh phụ:\">\r\n          <label className=\"upload-btn-wrapper\">\r\n            <input\r\n              type=\"file\"\r\n              required\r\n              onChange={onChange}\r\n              name=\"productAttachImages\"\r\n            />\r\n            <span>Tải lên file .zip</span>\r\n          </label>\r\n        </Form.Item>\r\n        <Form.Item label=\"Giá:\">\r\n          {getFieldDecorator('cost', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Giá không được để trống !',\r\n              },\r\n            ],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Danh mục\" hasFeedback>\r\n          {getFieldDecorator('category_id', {\r\n            rules: [{ required: true, message: 'Danh mục không được trống !' }],\r\n          })(\r\n            <Select placeholder=\"Chọn danh mục\">\r\n              {categories.map(({ name, _id }, index) => (\r\n                <Option key={index} value={_id}>\r\n                  {name}\r\n                </Option>\r\n              ))}\r\n            </Select>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"Mô tả:\">\r\n          {getFieldDecorator('description', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Mô tả không được để trống !',\r\n              },\r\n            ],\r\n          })(<TextArea />)}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Tải lên\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withCookies(Form.create({ name: 'sign-up' })(PostProduct));\r\n"],"sourceRoot":""}